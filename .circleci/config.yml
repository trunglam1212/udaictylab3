version: 2.1  
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: << parameters.workflow_id >> "
            aws s3 rm "s3://udapeople-<< parameters.workflow_id >>" --recursive
            aws cloudformation delete-stack --stack-name "udapeople-backend-<< parameters.workflow_id >>"
            aws cloudformation delete-stack --stack-name "udapeople-frontend-<< parameters.workflow_id >>"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string    
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/MH6NeF9tCh3uP1DufQrafj/migration_<< parameters.workflow_id >>)
            # Logic for reverting the database state
            if [[ "${SUCCESS}" == "1" ]];
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi  

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
              
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-test]
      - run:
          name: run front-end test
          command: |
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: run back-end test
          command: |
            cd backend
            npm install
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-audit]
      - run:
          name: run frontend audit
          command: |
            cd frontend
            npm install
            npm audit fix
            npm audit --audit-level=critical || true
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-audit

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-audit]
      - run:
          name: run backend audit 
          command: |
            cd backend
            npm install
            npm audit fix
            npm audit --audit-level=critical || true
      - save_cache:
          paths: [backend/node_modules]
          key: backend-audit

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli:latest
    steps:
      - checkout
      - run:
          command: |
            yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople 
             
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
                --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}"\
                --query 'Reservations[*].Instances[*].PublicIpAddress'\
                --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

  configure-infrastructure:
    docker:
      - image: circleci/python:3.8

    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["24:51:5c:46:32:f3:ce:cf:50:d2:d4:60:85:7c:f2:9a"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |  
            sudo apt-get update
            sudo apt-get install -y tar gzip ansible awscli
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i inventory.txt configure-server.yml
      # Here's where you will add some code to rollback on failure   
  
  deploy-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install Python 3.8
          command: |
            sudo apt-get update
            sudo apt-get install -y python3.8 python3-pip

      # Cài đặt Ansible
      - run:
          name: Install Ansible
          command: |
            sudo apt-get update
            sudo apt-get install -y ansible

      # Cài đặt NPM và Node.js
      - run:
          name: Install NPM and Node.js
          command: |
            curl -sL https://deb.nodesource.com/setup_14.x| sudo -E bash -
            sudo apt-get install -y nodejs

      # Cài đặt AWS CLI
      - run:
          name: Install AWS CLI
          command: |
            sudo apt-get install -y unzip
            curl "https://d1vvhvl2y92vvt.cloudfront.net/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
                --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}"\
                --query 'Reservations[*].Instances[*].PublicIpAddress'\
                --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
                    
  deploy-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["24:51:5c:46:32:f3:ce:cf:50:d2:d4:60:85:7c:f2:9a"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install Python 3.8
          command: |
            sudo apt-get update
            sudo apt-get install -y python3.8 python3-pip

      # Cài đặt Ansible
      - run:
          name: Install Ansible
          command: |
            sudo apt-get update
            sudo apt-get install -y ansible

      # Cài đặt NPM và Node.js
      - run:
          name: Install NPM and Node.js
          command: |
            curl -sL https://deb.nodesource.com/setup_14.x| sudo -E bash -
            sudo apt-get install -y nodejs

      # Cài đặt AWS CLI
      - run:
          name: Install AWS CLI
          command: |
            sudo apt-get install -y unzip
            curl "https://d1vvhvl2y92vvt.cloudfront.net/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Deploy backend
          command: |
            echo ENVIROMENT=development > "backend/.env"      
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"      
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"      
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"    
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"      
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"      
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"            
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"      
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"     
            echo "CONTENT OF backend/.env"      
            cat backend/.env      
            cd backend
            npm i
            npm run build
            cd ..
            ## Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            pwd
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i inventory.txt deploy-backend.yml

  smoke-test:
    docker:
      - image: alpine:latest
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache curl nodejs npm
        # Cài đặt AWS CLI
      - run:
          name: Install AWS CLI
          command: |
            apk add --no-cache python3 py3-pip
            pip3 install --upgrade pip
            pip3 install awscli
           
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
                --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}"\
                --query 'Reservations[*].Instances[*].PublicIpAddress'\
                --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            # Perform the smoke test
            if curl "${API_URL}/api/status" | grep "ok"; then
              exit 0
            else
              exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
            echo ${URL}

            if curl -s ${URL} | grep "Welcome"; then
              exit 0
            else
              exit 1
            fi
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout 
      - run:
          name: Run migrations
          command: |
            cd backend
            npm i
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/MH6NeF9tCh3uP1DufQrafj/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi

  cloudfront-update:
    docker:
      - image: amazon/aws-cli:latest
    steps:
      - checkout
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople

  cleanup:
    docker:
      - image: amazon/aws-cli:latest
    steps:
      - checkout
      - run:
          name: Remove old stacks and files
          command: |
            export OldWorkflowID=$(cat .circleci/files/oldStack.txt)
            ## Fetch the stack names          
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
             --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}" 
            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}" ]]
            then
              cat ${OldWorkflowID}
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi  

workflows:
  default:
    jobs:
      # - build-frontend
      # - build-backend    
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      # - deploy-infrastructure:
      #     requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #     filters:
      #       branches:
      #         only: master
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      #     filters:
      #       branches:
      #         only: master
      # - run-migrations:
      #     requires: [configure-infrastructure]
      #     filters:
      #       branches:
      #         only: master
      # - deploy-frontend:
      #     requires: [run-migrations]
      #     filters:
      #       branches:
      #         only: master
      # - deploy-backend:
      #     requires: [run-migrations]
      #     filters:
      #       branches:
      #         only: master
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      #     filters:
      #       branches:
      #         only: master
      # - cloudfront-update:
      #     requires: [smoke-test]
      #     filters:
      #       branches:
      #         only: master
      - cleanup
          # requires: [cloudfront-update]
          # filters:
          #   branches:
          #     only: master